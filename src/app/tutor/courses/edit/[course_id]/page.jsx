"use client";

import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import Header from "@/app/components/header";
import BackButton from "@/app/components/BackButton";

export default function EditCoursePage() {
  const router = useRouter();
  const { course_id } = useParams();
  const [loading, setLoading] = useState(true);
  const [subjects, setSubjects] = useState([]);
  const [form, setForm] = useState({
    subject_id:         "",
    course_title:       "",
    course_description: "",
    rate_per_hour:      "",
    teaching_method:    "",
    level:              "",
  });

  useEffect(() => {
    const userId = localStorage.getItem("userId");
    if (!userId) return;

    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤
    fetch("/api/subjects")
      .then(res => res.json())
      .then(setSubjects)
      .catch(console.error);

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏î‡∏¥‡∏°
    fetch(`/api/tutor/${userId}/courses/${course_id}`)
      .then(res => {
        if (!res.ok) throw new Error();
        return res.json();
      })
      .then(data => {
        setForm({
          subject_id:         data.subject_id || "",
          course_title:       data.course_title || "",
          course_description: data.course_description || "",
          rate_per_hour:      data.rate_per_hour?.toString() || "",
          teaching_method:    data.teaching_method || "",
          level:              data.level || "",
        });
      })
      .catch(() => alert("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"))
      .finally(() => setLoading(false));
  }, [course_id]);

  const handleChange = e => {
    const { name, value } = e.target;
    setForm(f => ({ ...f, [name]: value }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setLoading(true);
    const userId = localStorage.getItem("userId");
    const res = await fetch(`/api/tutor/${userId}/courses/${course_id}`, {
      method:  "PUT",
      headers: { "Content-Type": "application/json" },
      body:    JSON.stringify({
        ...form,
        rate_per_hour: Number(form.rate_per_hour),
      }),
    });
    setLoading(false);

    if (res.ok) {
      router.push("/tutor/courses");
    } else {
      const err = await res.json();
      alert("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " + err.error);
    }
  };

  const menuItems = [
    { label: "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", path: "/tutor/courses" },
    { label: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", path: "/hometutor" },
    { label: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", onClick: () => {
        localStorage.removeItem("userId");
        router.push("/login");
      }
    },
  ];

  if (loading) {
    return <p className="text-center text-gray-500 py-10">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header dropdownItems={menuItems} />

      <div className="max-w-3xl mx-auto py-8 px-6">
        <BackButton>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</BackButton>

        <div className="bg-white rounded-2xl shadow-lg p-8 mt-4">
          <h2 className="text-2xl font-semibold mb-6">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏£‡πå‡∏™</h2>

          <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* ‡∏ß‡∏¥‡∏ä‡∏≤ */}
            <div>
              <label className="block mb-1 text-gray-700">‡∏ß‡∏¥‡∏ä‡∏≤</label>
              <select
                name="subject_id"
                value={form.subject_id}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ --</option>
                {subjects.map(s => (
                  <option key={s.subject_id} value={s.subject_id}>
                    {s.name}
                  </option>
                ))}
              </select>
            </div>

            {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™ */}
            <div>
              <label className="block mb-1 text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</label>
              <input
                name="course_title"
                value={form.course_title}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              />
            </div>

            {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏ñ‡∏ß) */}
            <div className="md:col-span-2">
              <label className="block mb-1 text-gray-700">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
              <textarea
                name="course_description"
                value={form.course_description}
                onChange={handleChange}
                rows={4}
                className="w-full border border-gray-300 px-3 py-2 rounded"
              />
            </div>

            {/* ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ */}
            <div>
              <label className="block mb-1 text-gray-700">‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó/‡∏ä‡∏°.)</label>
              <input
                name="rate_per_hour"
                type="number"
                min="0"
                value={form.rate_per_hour}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              />
            </div>

            {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô */}
            <div>
              <label className="block mb-1 text-gray-700">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô</label>
              <select
                name="teaching_method"
                value={form.teaching_method}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô --</option>
                <option value="online">‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</option>
                <option value="offline">‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå</option>
              </select>
            </div>

            {/* ‡∏£‡∏∞‡∏î‡∏±‡∏ö */}
            <div>
              <label className="block mb-1 text-gray-700">‡∏£‡∏∞‡∏î‡∏±‡∏ö</label>
              <input
                name="level"
                value={form.level}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°.4"
                required
              />
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
            <div className="md:col-span-2">
              <button
                type="submit"
                className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded"
              >
                üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
