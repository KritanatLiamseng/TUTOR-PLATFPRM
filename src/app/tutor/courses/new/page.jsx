"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Header from "@/app/components/header";
import BackButton from "@/app/components/BackButton";

export default function NewCoursePage() {
  const router = useRouter();
  const [subjects, setSubjects] = useState([]);
  const [form, setForm] = useState({
    subject_id: "",
    course_title: "",
    course_description: "",
    rate_per_hour: "",
    teaching_method: "",
    level: "",
  });
  const [loading, setLoading] = useState(false);

  const menuItems = [
    { label: "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", path: "/tutor/courses" },
    { label: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", path: "/hometutor" },
    { label: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", onClick: () => {
        localStorage.removeItem("userId");
        router.push("/login");
      }
    },
  ];

  useEffect(() => {
    fetch("/api/subjects")
      .then(r => r.json())
      .then(setSubjects)
      .catch(console.error);
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm(f => ({ ...f, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const userId = localStorage.getItem("userId");
    const res = await fetch(`/api/tutor/${userId}/courses`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(form),
    });
    setLoading(false);
    if (res.ok) {
      router.push("/tutor/courses");
    } else {
      const err = await res.json();
      alert("‚ùå " + err.error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header dropdownItems={menuItems} />

      <div className="max-w-3xl mx-auto py-8 px-6">
        <BackButton>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</BackButton>
        <div className="bg-white rounded-2xl shadow-lg p-8 mt-4">
          <h2 className="text-2xl font-semibold mb-6">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡∏°‡πà</h2>

          <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* ‡∏ß‡∏¥‡∏ä‡∏≤ */}
            <div>
              <label className="block mb-1">‡∏ß‡∏¥‡∏ä‡∏≤</label>
              <select
                name="subject_id"
                value={form.subject_id}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ --</option>
                {subjects.map(s => (
                  <option key={s.subject_id} value={s.subject_id}>
                    {s.name}
                  </option>
                ))}
              </select>
            </div>

            {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™ */}
            <div>
              <label className="block mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</label>
              <input
                name="course_title"
                value={form.course_title}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              />
            </div>

            {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á) */}
            <div className="md:col-span-2">
              <label className="block mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
              <textarea
                name="course_description"
                value={form.course_description}
                onChange={handleChange}
                rows={4}
                className="w-full border border-gray-300 px-3 py-2 rounded"
              />
            </div>

            {/* ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
            <div>
              <label className="block mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó/‡∏ä‡∏°.)</label>
              <input
                name="rate_per_hour"
                type="number"
                value={form.rate_per_hour}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              />
            </div>

            {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô */}
            <div>
              <label className="block mb-1">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô</label>
              <select
                name="teaching_method"
                value={form.teaching_method}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ --</option>
                <option value="online">‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</option>
                <option value="offline">‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå</option>
              </select>
            </div>

            {/* ‡∏£‡∏∞‡∏î‡∏±‡∏ö */}
            <div>
              <label className="block mb-1">‡∏£‡∏∞‡∏î‡∏±‡∏ö</label>
              <input
                name="level"
                value={form.level}
                onChange={handleChange}
                className="w-full border border-gray-300 px-3 py-2 rounded"
                required
              />
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
            <div className="md:col-span-2">
              <button
                type="submit"
                disabled={loading}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 rounded"
              >
                {loading ? "‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
